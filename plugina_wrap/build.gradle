import com.android.build.gradle.api.ApkVariant

//if (isDebug.toBoolean()) {
apply plugin: 'com.android.application'
//} else {
//    apply plugin: 'com.android.library'
//}


android {
    compileSdkVersion 24
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"

//        if (isDebug.toBoolean()) {
        applicationId "com.ym.plugin.pluginwrap"
//        }
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            if (isDebug.toBoolean()) {
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
                java.srcDirs = ['src/main/java']
            } else {
                manifest.srcFile 'src/main/release/AndroidManifest.xml'
                java.srcDirs = ['src/main/plugin/']
            }
            assets.srcDirs = ['src/main/assets', 'src/main/assets/']
        }
    }

    aaptOptions.additionalParameters '--PLUG-resoure-id', '0x42'
}


dependencies {
    if (isDebug.toBoolean()) {
        compile fileTree(dir: 'libs', include: ['*.jar'])
    } else {
        provided fileTree(dir: 'libs', include: ['*.jar'])
    }

    compile project(':librarya')

    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:24.2.1'
    testCompile 'junit:junit:4.12'
}



def nameMap = 'pluginA.jar'
if (!isDebug.toBoolean()) {
    android.applicationVariants.all { ApkVariant variant ->
        def buildTypeName = variant.buildType.name
        def task = project.tasks.create "jar${buildTypeName.capitalize()}", Jar
        task.archiveName = nameMap
        println '______________________________\n__\n\n__________' + task.archivePath
        task.dependsOn variant.javaCompiler
        task.outputs.upToDateWhen { false }
        task.from variant.javaCompiler.destinationDir
        task.destinationDir = file('../' + 'app/src/main/assets')
        artifacts.add('archives', task)
    }
}

